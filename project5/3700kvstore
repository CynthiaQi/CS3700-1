#!/usr/bin/env python
import sys, socket, select, time, json, random

# main function
if __name__ == '__main__':
    # Your ID number
    my_id = sys.argv[1]
    # The ID numbers of all the other replicas
    replica_ids = sys.argv[2:]

    raft = Raft(my_id, replica_ids)
    raft.recieve()
    
class Raft(object):
    def __init__(self, my_id, replica_ids):
        self.my_id = my_id
        self.replica_ids = replica_ids
        self.last = 0
        self.initSocket()
        
    # initialize and connect to a socket object
    def initSocket(self):
        self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        self.sock.connect(self.my_id)
        
    def recieve(self):
        while True:
            ready = select.select([self.socket], [], [], 0.1)[0]

            if self.socket in ready:
                msg_raw = self.socket.recv(32768)

                if len(msg_raw) == 0: continue
                msg = json.loads(msg_raw)

                # For now, ignore get() and put() from clients
                if msg['type'] in ['get', 'put']:
                    pass

                # Handle noop messages. This may be removed from your final implementation
                elif msg['type'] == 'noop':
                    print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

            clock = time.time()
            if clock-last > 2:
                # Send a no-op message to a random peer every two seconds, just for fun
                # You definitely want to remove this from your implementation
                msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
                self.socket.send(json.dumps(msg))
                print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
                last = clock
