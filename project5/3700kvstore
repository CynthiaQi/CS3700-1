#!/usr/bin/env python
import sys, socket, select, time, json, random


class Raft(object):
    def __init__(self, my_id, replica_ids, logfile):
        self.id = my_id
        self.replica_ids = replica_ids
        self.logfile = logfile
        self.init_socket()

        # Low end of election timeout, determines other timeout values
        self.base_timeout = .15

        # Election timer
        self.election_timer = None
        # Randomly chosen election timeout
        self.election_timeout = random.uniform(self.base_timeout, self.base_timeout * 2.0)
        # Heartbeat timer
        self.heartbeat_timer = None
        # Interval to send heartbeats is half of minimum election_timeout
        self.heartbeat_interval = self.base_timeout / 2.0
        # Maps replica ids to their vote
        self.votes = dict()
        # Current leader
        self.leader = 'FFFF'
        # latest election term, increases monotonically
        self.current_term = 0
        # id of candidate voted for in the current term
        self.voted_for = None
        # list of messages received when leader was unknown
        self.pre_election_queue = list()

        # the log entries
        self.log = []
        # the state machine
        self.state = {}
        # highest log entry index commited
        self.commit_index = 0
        # highest log entry index applied to state machine
        self.last_applied = 0

        # leader only state
        # map of server id to next log entry to send to that server
        self.next_index = {}
        # map of server id to highest log entry known to be replicated there
        self.match_index = {}
        # to remember rpc data
        self.entries_sent = {}
        # map of follwer_id -> (entries_sent, time_sent)
        self.rpc = {}


    # Initialize and connect to a socket object
    def init_socket(self):
        self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        self.socket.connect(self.id)


    # When the leader changes, make sure queued messages get processed
    def process_pre_election_queue(self):
        for message in self.pre_election_queue:
            self.handle_message(message)
        self.pre_election_queue = list()


    # Event loop for receiving messages on the socket
    def receive(self):
        # Start timers
        self.election_timer = time.time()
        self.heartbeat_timer = time.time()

        # Loop and listen for messages
        while True:
            # Wait for socket to be ready
            self.apply_commits()
            ready = select.select([self.socket], [], [], 0.01)[0]
            if self.socket in ready:
                # Obtain the raw message from the socket
                msg_raw = self.socket.recv(32768)
                # If message is not empty, pass along to be parsed
                if len(msg_raw) != 0:
                    self.handle_message(msg_raw)

            if self.leader == self.id:
                # If we are leader, send a heartbeat every heartbeat_interval
                if (time.time() - self.heartbeat_timer) > self.heartbeat_interval:
                    self.send_heartbeat()

                self.update_followers()
                self.update_commit_index()
            else:
                # If election timeout has passed and we are not leader, begin election process
                if (time.time() - self.election_timer) > self.election_timeout:
                    self.send_request_vote()


    # apply any log entries which are confirmed by the leader
    def apply_commits(self):
        while self.commit_index > self.last_applied:
            self.last_applied += 1
            toApply = self.log[self.last_applied]
            self.state[toApply['key']] = toApply['value']
            if self.leader == self.id:
                self.send_ok(toApply['src'], toApply['mid'])
            self.printlog("applied commit: {}".format(toApply['mid']))


    # commit entries with quorum support
    def update_commit_index(self):
        new_commit_index = self.commit_index + 1
        while new_commit_index < len(self.log):
            confirms = 1 # at least we confirm it's valid
            for f, idx in self.match_index.iteritems():
                if idx >= new_commit_index:
                    confirms += 1
            self.printlog("{} commits for log_idx {}".format(confirms, new_commit_index))
            if confirms > (len(self.replica_ids) + 1) / 2:
                if self.log[new_commit_index]['term'] == self.current_term:
                    self.commit_index = new_commit_index
                new_commit_index += 1
            else:
                break


    # send appendEntries to followers where necessary
    def update_followers(self):
        last_log_index = len(self.log) - 1
        for follower, next_index in self.next_index.iteritems():
            if (last_log_index >= next_index and
                    (self.rpc[follower][1] is None or
                        ((time.time() - self.rpc[follower][1]) > 0.02))):
                self.send_append_entries(follower)


    # send append entries message to a replica
    def send_append_entries(self, follower):
        prevLogIndex = self.next_index[follower] - 1
        entries = self.log[prevLogIndex + 1:prevLogIndex + 50]
        prevLogTerm = self.log[prevLogIndex]['term']
        msg = { 'src': self.id,
                'dst': follower,
                'leader': self.leader,
                'type': 'appendEntries',
                'term': self.current_term,
                'entries': entries,
                'leaderCommit': self.commit_index,
                'prevLogTerm': prevLogTerm,
                'prevLogIndex': prevLogIndex
            }
        self.rpc[follower] = (len(entries), time.time())
        self.socket.send(json.dumps(msg))


    # Handles when the event loop recieves a message on the socket
    def handle_message(self, msg_raw):
        try:
            msg = json.loads(msg_raw)

            # No leader, save the get or put msg to pre_election_queue for later processing
            if self.leader == 'FFFF' and (msg['type'] == 'get' or msg['type'] == 'put'):
                self.pre_election_queue.append(msg_raw)
            # Handle each message type
            elif msg['type'] == 'get':
                self.handle_get(msg)
            elif msg['type'] == 'put':
                self.handle_put(msg)
            elif msg['type'] == 'appendEntries':
                self.handle_append_entries(msg)
            elif msg['type'] == 'appendEntriesReply':
                self.handle_append_entries_reply(msg)
            elif msg['type'] == 'requestVote':
                self.handle_request_vote(msg)
            elif msg['type'] == 'vote':
                self.handle_vote(msg)
        except (ValueError, KeyError, TypeError) as e:
            self.printlog("[Error]: Received corrupt message! {}".format(msg_raw))
            raise e


    # Handle APPEND_ENTRIES type messages
    def handle_append_entries(self, msg):
        # Reset the elction timer
        self.election_timer = time.time()
        # If term in heartbeat is larger or equal to current term
        if self.current_term <= msg['term']:
            # Update the current term and leader
            self.current_term = msg['term']
            self.leader = msg['leader']
            # Process the pre_election_queue now that we know a leader
            self.process_pre_election_queue()
        if len(msg['entries']) == 0:
            return
        # Handle normal append entries RPC
        result = {
                'src': self.id,
                'dst':msg['src'],
                'leader': self.leader,
                'type': 'appendEntriesReply',
                'term': self.current_term
                }
        if self.current_term > msg['term']:
            # Reply false if term < currentTerm
            result['success'] = False
        elif (msg['prevLogIndex'] >= 0 and
                (len(self.log) <= msg['prevLogIndex'] or
                    self.log[msg['prevLogIndex']]['term'] != msg['prevLogTerm'])):
            # Reply false if log doesn't contain a prevLogTerm entry at prevLogIndex
            result['success'] = False
        else:
            # delete any conflicting entries
            lastValid = msg['prevLogIndex']
            redundantEntries = 0
            for idx, e in enumerate(self.log[lastValid + 1:]):
                if len(msg['entries']) > idx and e['term'] == msg['entries'][idx]['term']:
                    lastValid += 1
                    redundantEntries += 1
                else:
                    break
            for entry in self.log[lastValid + 1:]:
                if entry['received_by'] == self.id:
                    self.send_redirect(entry['src'], entry['mid'])
            self.log = self.log[:lastValid + 1]
            # append any new entries
            for e in msg['entries'][redundantEntries:]:
                self.log.append(e)
            # increment commit_index
            if msg['leaderCommit'] > self.commit_index:
                self.commit_index = min(len(self.log) - 1, msg['leaderCommit'])
            result['success'] = True
        self.socket.send(json.dumps(result))

    # Handle APPEND ENTRIES REPLY type messages
    def handle_append_entries_reply(self, msg):
        # Ignore replies if not the leader
        if self.leader == self.id:
            if msg['success']:
                n = self.rpc[msg['src']][0]
                self.rpc[msg['src']] = (0, None)
                self.next_index[msg['src']] += n
                self.match_index[msg['src']] = self.next_index[msg['src']] - 1
            else:
                if msg['term'] > self.current_term:
                    self.current_term = msg['term']
                    self.leader = msg['src']
                else:
                    self.next_index[msg['src']] -= 1


    # Handle REQUEST_VOTE type messages
    def handle_request_vote(self, msg):
        # Default to False vote
        vote = False
        # If the term is greater than current_term, reset our vote
        if msg['term'] > self.current_term:
            self.voted_for = None
            self.current_term = msg['term']

        # Vote true if:
            # Message term >= our current term
            # We haven't voted or already voted for this candidate
            # Logs are up to date
        not_already_voted = self.voted_for is None or self.voted_for == msg['src']
        lastLogIndex = len(self.log) - 1
        lastLogTerm = self.log[lastLogIndex]['term'] if lastLogIndex >= 0 else -1
        log_up_to_date = False
        if msg['lastLogTerm'] > lastLogTerm:
            log_up_to_date = True
        elif msg['lastLogTerm'] == lastLogTerm:
            if msg['lastLogIndex'] >= lastLogIndex:
                log_up_to_date = True
        if not_already_voted and log_up_to_date:
            vote = True
            # Remember that we voted for this replica
            self.voted_for = msg['src']

        # Send a vote message back to sender
        vote_msg = {'src': self.id, 'dst': msg['src'], 'leader': self.leader,
                    'type': 'vote', 'vote': vote, 'term': self.current_term}
        self.socket.send(json.dumps(vote_msg))
        # Reset election timer
        self.election_timer = time.time()


    # Handle VOTE type messages
    def handle_vote(self, msg):
        # If current_term is lower than the response term, update our current_term
        if self.current_term < msg['term']:
            self.current_term = msg['term']
            self.reset_election()
        # Ignore votes if we are already leader or if term doesn't match
        if self.leader != self.id and self.current_term == msg['term'] and self.voted_for == self.id:
            # Record the vote
            self.votes[msg['src']] = msg['vote']
            # Determine if we have majority vote
            vote_count = 0
            for vote in self.votes.values():
                if vote: vote_count += 1
            # If we have majority True votes from the replicas
            # NOTE: Total replica count = len(replica_ids) + 1
            if vote_count > (len(self.replica_ids) + 1) / 2:
                # Election was won, set self as leader and send heartbeat
                self.leader = self.id
                self.initialize_leader_state()
                self.printlog("Election won with " + str(vote_count) + " votes for ID " + self.leader)
                self.send_heartbeat()
                # Process pre_election_queue now that we are leader
                self.process_pre_election_queue()


    # initialize leader specific state
    def initialize_leader_state(self):
        for follower in self.replica_ids:
            self.next_index[follower] = len(self.log)
            self.match_index[follower] = 0
            self.rpc[follower] = (0, None)



    # Handle GET type messages
    def handle_get(self, msg):
        self.printlog('GET {} {}'.format(msg['key'], msg['MID']))
        # FORMAT: {"src": "<ID>", "dst": "<ID>", "leader": "<ID>", "type": "get", "MID": "<a unique string>", "key": "<some key>"}
        if self.leader != self.id:
            # If we are not the leader, send a redirect message
            self.send_redirect(msg['src'], msg['MID'])
        else:
            if msg['key'] in self.state:
                self.send_ok(msg['src'], msg['MID'], self.state[msg['key']])
            else:
                # If key does not exist return empty OK message for value of key
                self.send_ok(msg['src'], msg['MID'], '')


    # Handle PUT type messages
    def handle_put(self, msg):
        self.printlog('PUT {} {} {}'.format(msg['MID'], msg['key'], msg['value']))
        # FORMAT: {"src": "<ID>", "dst": "<ID>", "leader": "<ID>", "type": "put", "MID": "<a unique string>", "key": "<some key>", "value": "<value of the key>"}
        if self.leader != self.id:
            # If we are not the leader, send a redirect message
            self.send_redirect(msg['src'], msg['MID'])
        else:
            self.log.append({
                'term': self.current_term,
                'key': msg['key'],
                'value': msg['value'],
                'src': msg['src'],
                'mid': msg['MID'],
                'received_by': self.id
                })

    # Send heartbeats
    def send_heartbeat(self):
        # Send a heartbeat message
        heartbeat_msg = {'src': self.id, 'dst': 'FFFF', 'leader': self.leader,
                         'type': 'appendEntries', 'term': self.current_term,
                         'entries': [], 'leaderCommit': self.commit_index,
                         'prevLogTerm': 'TODO', 'prevLogIndex': 'TODO'}
        self.socket.send(json.dumps(heartbeat_msg))
        # Reset heartbeat timer
        self.heartbeat_timer = time.time()


    # Reset before starting a new election
    def reset_election(self):
        self.leader = 'FFFF'
        self.votes = dict()
        self.voted_for = None


    # Called to invoke election process and request votes
    def send_request_vote(self):
        # Reset from previous election
        self.reset_election()
        # Increment current_term
        self.current_term += 1
        self.voted_for = self.id
        # Vote for self
        self.votes[self.id] = True
        # Reset election timer
        self.election_timer = time.time()
        # Send RequestVote RPCs to all replicas
        lastLogIndex = len(self.log) - 1
        lastLogTerm = self.log[-1]['term'] if lastLogIndex >= 0 else -1
        request_vote_msg = {'src': self.id, 'dst': 'FFFF', 'leader': self.leader,
                            'type': 'requestVote', 'term': self.current_term,
                            'lastLogIndex': lastLogIndex, 'lastLogTerm': lastLogTerm}
        self.socket.send(json.dumps(request_vote_msg))
        self.printlog("Beginning election " + str(self.current_term))


    # Sends a FAIL type message to given dest
    def send_fail(self, dest, message_id):
        # self.printlog("FAIL {} {}".format(dest, message_id))
        fail_msg = {'src': self.id, 'dst': dest, 'leader': self.leader, 'type': 'fail', 'MID': message_id}
        self.socket.send(json.dumps(fail_msg))


    def send_ok(self, dest , mid, val = None):
        # self.printlog('OK-{} {} {} {}'.format('PUT' if val is None else 'GET', dest, mid, val))
        ok_msg = {'src': self.id, 'dst': dest, 'leader': self.leader, 'type': 'ok', 'MID': mid}
        if val is not None:
            ok_msg['value'] = val
        self.socket.send(json.dumps(ok_msg))


    # Sends a REDIRECT type message to given dest
    def send_redirect(self, dest, message_id):
        redirect_msg = {'src': self.id, 'dst': dest, 'leader': self.leader, 'type': 'redirect', 'MID': message_id}
        self.socket.send(json.dumps(redirect_msg))


    # Simple logging method
    def printlog(self, log_message):
        self.logfile.write("[" + self.id + "][" + self.leader + "]: " + log_message + "\n")
        self.logfile.flush()


# main function
if __name__ == '__main__':
    # Your ID number
    my_id = sys.argv[1]
    # The ID numbers of all the other replicas
    replica_ids = sys.argv[2:]
    # Start the program
    with open('log{}'.format(my_id), 'w') as logfile:
        raft = Raft(my_id, replica_ids, logfile)
        raft.receive()
